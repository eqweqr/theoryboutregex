Conspect of vim and latex
1). -- repeat move
2)x -- delete ceracter under cursor
3)dd -- delete line
4)u -- отменить прошлое действие
5)A -- начать изменения с конца строчки
6)f -- find character and point cursor after character in next part of file
7)t -- find and move before
8)$ -- cursor in end of line
9)@: -- повторить команду из командного режима
10) F and T -- are the same with f and t but find character in previous part of file
	Команды повторения и обратные им
		for edits:
		. --- для повторения изменения в файле
		u --- отмена изменения в файле
		for f and t(F and T):
		; --- repeat
		, --- undo
		/pattern -- найти следующее совпадение в файле
		?pattern -- найти предыдущее совпадение:
		n -- repeat
		N -- undo
		:s/target/replacement -- выполнить подстановку:
		& -- repeat
		u -- undo
		qx{change}q -- выполнить последовательность изменений :
		@x -- repeat
		u -- undo
	способы замены слов в тексте
чтобы например заменить все слова abab на copy, нужно выполнить следующую команду:
:%s/abab/copy/g
Чтобы выполнить выделение всех слов по шаблону нужно выполнить следующие команды
/слова -- устанавливаем курсор перед началом слова
* -- выделяем все совпадающие слова и переводим курсор на следующее
cwcopy<esc> -- заменить выделенное слово на copy
n -- перейти на следующее выделенное слово
. -- повторть вставку
перемещение в режиме выставки закрывает последнее изменение, использвание стрелок образует новый блок изменений, использование контрола в режиме встави активирует командный режим
Способы редактирования текста:
1) удаление назад( всего слова до курсора не включая(db))
2) удалнение символа под курсором(x)
3) переход к началу слова(b)
4) удаление всего слова после курсора вместе с ними(dw)
5) удаление всего слова вне зависимости от расположения курсора(daw)

Использование счетчиков:
наводим курсор на число и пишим числоC-a для увеличения числа под курсором C-x для уменьшения, если курсор установлен на букве, то увеличение будет происходить на следующее число 

yy--копируют всю строку на которой курсор
p -- вставить скопированную строчку на следующее
cw -- переходит на первый символ строки, удаляет его и переводит в режим вставк
set nrformats= делает десятричную систему счисления стандартной, при отключнии эого режима число начинающееся с 0 будет считаться представленым в восьмеричном формате

Указывание числа перед командой говорит сколько раз стоит повторить команду
Команды 2dw d2w удаляют по два слова после курсора
Чтобы удалить 3 слова и перейти в режим вставки надо выполнить следующую команду cw3 

 Оператор + команда перемещения = действие:
Например d отвечает за удаление и к ней можно добавить следующие комбинации:
l - для удаления одного символа
ap - абзаца
aw - слова
gU используется для выведение в верхний регистр, использует те же команды перемещения
ОСНОВНОЕ ПРАВИЛО: ДЕЙСТВИЕ ОПРЕДЕЛЯЕТСЯ ОПЕРАТОРОМ, ЗА КОТОРЫМ УКАЗЫВАЕТСЯ КОМАНДА ПЕРЕМЕЩЕНИЯ КУРСО  
Команды-оператры:
c -- изменить
d -- удалить
y -- копировать в регистре
g~ -- поменять регистр символа
gu -- преобразовать в нижний регистр
gU -- в верхний
> -- сдвинуть влево
< -- сдвинуть вправо
= -- выравнивать автоматически
! --фильтровать строки внешней программай

Редактирование в режиме вставки:
С-h -- удаление одного символа левее курсора
C-w -- кдаление слова левее курсора
C-u -- удавление до начала строки

Переход в режим вставки:
esc
C-[
C-o-- входит в командный подрежим в режиме вставки

Команда zz прокручивает так что верхняя или нижняя строчка становится в середину экрана, удобно использовать в подрежиме вставки после использования переводит в режим вставки

Рецепт как встаить из буфера обмена в режиме вставки?

yt, -- копируем от места курсора до первого вхождения запятой
<С-r>0 -- вставка из буфера обмена в мосто курсора

С-r{register }:При вставке из регистра, можно заметить подлаги, тк вставка происходит по одному символу.
Если включена настройка textwidth млм autoindent, в тексте могут появиться нежелательные разрывы строк или доп. отступы.

Выполнение вычислений на месте:
Регистр выражений - он может вычислить выражение на языке сценариев vim  и возвращать результат
Регистр выражений адресуется символом =, получить доступ к регистру выражений из режима вставки можно выполнить командой <C-r>= чтобы выйти нужно и вписать результат вычислений нужно нажать контрл.

Вставка необычных символов(которых нет на клавиатуре) по их коду
C-v{code}, если нужно встатить из уникода, то команду заменить на след: <c-v>u{code}

Чтобы посмотреть код символа достаточно навести на него курсор и выполнить команду ga,в результате в нижней части экрана будет выведено сообщение с кодом элемента

Диграфы -- позволяют генерировать новый элемент на основе двух других символов, для этого используют следующую команду: С-k{char}{char}, чтобы посмотреть все доступные диграфы можно использовать одну из след. команд :digraphs or :h digraph-table

Tакже в Vim есть режим замены, который затирает символы, чтобы перейти в него нужно нажать R далее любой введенный символ будет затирать символ под курсором и ставить новое значение.

Также можно делать замену одного символа прямо из командного режима для этого нужно использовать команду: r{char} or gr{char}

Чтобы войти в виртуальный режим замены нужно нажать gR, в таком режиме число реальных символов совпадает с числом видимых на экране, для таба будет соответствовать 8 символов.

Визуальный режим позволяет выделять фрагменты текста и применять операции к целым фрагментам, всего существует 3 вида визуального режима.
v -- переводит из командного режима в виртуальный
viw -- выделяет слово в виртуальном режиме, после можено например нажать клавишу с для забоя слова

Визуальный режим после проделанногоо действия не закрывается автоматически всё зависит от типа вводимой команды, но есть режим выделения который после введения любого символа переводит в режим вставки и заменяет выделенный текст на введенный символ, для переключения между этими двумя режимами используется команда С-g

ВЫделение текста в визуальном режиме:
v -- посимовльный виратуальный режим
V -- построчный виртуальнйы режим
c-v -- блочный
gv -- повторение последенго выделения, делается из командного режима

повторное нажатие этих символов ведет к возвращению в командный режим.
o -- переводит в курсор в конец выделенного фрагмента
bb -- делает выделение слова перед курсором
e -- выделение после курсора

Чтобы указать сколько проббелов должен занимать таб нужно ввести команду:
:set shiftwidth=4 shifttabstop=4 expandtab
vit -- выделяет текст внутри тега

it -- тоже приводит к выделению внутри тега, но его можно исаользовать с другой командой изменения , и редактор будет интерперетировать их как одну команду,например, команда gUit -- будет переводить в верхний регистр текст внутри тега и редактор будет воспринимать её как одну команду

> -- для отступа(перед символом ставится число чтобы указать на сколько знаков табуляции надо отступить.

U -- ПЕРЕВОД В ВЕРХНИЙ РЕГИСТР ВСЕГО ВЫДЕЛЕННОГО ТЕКСТА
Также можно использовать операторы командного режима для применения оператора к выделенному текстау например gU{motion}

Правка табличных данных в блочном визуальном режиме
Из командного режима нажать cntr+v для перехода в блочный виртуальный режим
x -- для удаление колонки, чтобы урегулировать рассторяние между колонками
gv -- чтобы снова выделить тот же фрагмент в тексте
r| -- замена всех выделенных символов |
yyp -- копировние первой строки целиком 
Vr- -- замена всех имеющихся символов в копированной строке ---

Блочный визуальный режим используется для вставки тексиа в несколько строк одновременно. Блочный визуальный режим можно с успехом использовать не только для работы с табличными данными

Например надо удалить блок данных 
C-v jje -- блочный режим с выделение трёх строк до первого окончания слова в 3ей строке 
с -- удаление всех символов внутри блок и переход в режим вставки

Выделение блока в блочнов визуальном режиме не квадратного.
Например у нас есть строки в конце которых нужно расставить ; для этого
переходим в визуальный блочный режим $ -- выделение блока до конца строки
A; -- в режиме вставки в конце таких блоков ставится ; в конце

Режим командной строки:
Когда вы нажимаете : -- то переходите в режим командной строки
В этом режиме можно вводить команды и запускать из нажатием клавиши <CR>, <ESC> -- можно выйти в любой момет покинуть командную строку и перейти в командный режим
Режим командной строки можно открыть введя / -- после чего появляется приглашение к поиску по шаблону или <C-r>= -- для достпа к регистру выражнеияй

Команды ex для выполнения операций с текстом в буфере:
:[range]delete[x]--удалить указанные строки [в регистре x]
:[range]yank[x]--скопировать указанные в строке[в регистре x]
:[line]put[x]--вставить текст из регистра x после указанной строки
:[range]copy{address}--скорирует указанные строки ниже строки с номером address
:[range]move{address}--переместить указанные строки ниже строки с номером address
:[range]join--объеденить указанные строки
:[range]normal{commands}--выполнить команду командного режима для каждой указанной строки
:[range]substitute/{pattern}/{string}/[flags]--замените вхождение {pattern} последовательностью символов {string} в каждой указанной строки
:[range]global/{pattern}/[cmd]--Выполнить команду для всех строки из указанных где найдется вхождение шаблона
Дополнительные возможности в командном режиме:
split -- для деления консоли на две части с одним и тем же фалом, удобно для редактирования
close -- закрыть деление консоли
only -- закрыть все окна кроме текущего, если в других окнах есть не сохраненный данные, то vim не даст закрыть их
split new_file -- открывает во втором окне новый файл
new -- чтобы открыть пустое окни
Можно указать размер нового окна, перед split нужно указать число строк соответствующих размеру нового окна 3split new_file -- открывыет новый файл в консоли с размером 3 строки для увеличения размера окна [cntr-w]+ для увеличения окна с минуслом для уменьшения, чтобы изменить размер окна оперделенным образом можно написать {height}ctrl-w_
vsplit -- разделение по вертикали
vertical new vnew -- пустое новое вертикальное окно
vsplit new_file -- открыть новый файл вертикально
Перемещение между окнами:
ctrl-w h -- перейти в окно слева
ctrl-w j -- перемещение в окно снизу
ctrl-w k -- перемещение в окно наверху
ctrl-w l -- перемещение в окно справа
ctrl-w t -- перейти в самое верхнее окно
ctrl-w b -- перейти в самое нижнее

Как менять экраны между собой : например нам потребовалось поменять местами верхнее и нажнее переходим в режим cntl-w+w для перемешения текущего окна вверх можно использовать cntl-w K
Для остальных перемещений действует та же мнемотехника
ctrl-w H -- поместить текущее окно в левую часть экрана 
ctrl-w J -- в нижнюю часть экрана
ctrl-w L -- правая

Применение команды во всех окнах:
qall -- для закрытия всех окон, но если есть окно с несохраненными данными, то редактор не разрешит закрыть и переведет курсор в окно где есть несохраненные данные
wall -- запись
wqall -- сохранить закрыть
Чтобы открыть каждый файл в строке аргументов каждый в своем окне
vim -o и перечисление всех файлов

Просмотр различий между двумя файлами vimdiff первый второй
Строки которые идентичны в двух файлах показываются как <-складка
Можно посмотреть различия не выходя из vim -- vertical diffpath новый файл

Чуть-чуть про бэкапы -- set backup == копия файла до изменения
set undofile -- ведет файл изменений

Команды для чтения и сохранения файла edit write, создание новых вкладок tabnew , операции со списком аргументов prev/next, или список буферов bprev bnext
Весь список команд :h ex-cmd-index
В отличии от командного режима, где символы вводятся в буффер, в режиме командной строки строки текста вводятся в специальную строку ввода. В обоих режимах можно использоватвь управляющие команды для выполнения команд.

cntl-w -- удавление символов до конца слова
cntl-u -- удавление символа до конца строчки

:число -- переводит курсор на указанную строку
:$ -- переход в конец файла
Можно эти команды совмещать с командами print и тд., например :1p -- показывает первую строку, задесь p -- сокращенная форма записи print
Для определения диапазона используется следующий синтаксис :2,5p -- показывает все строки от 2 до 5
:{start},{end}
В качестве адреса, представляющего текущую строку, можно использовать символ (.)
:% -- все строки в текущем тексте
Также команду substitute -- s ::%s/Practical/ds -- замена слова во всех строках текста

Определение строк посредством визуальном выделении
2G -- переход ко второй строке 
V -- выделение строки 
G -- выделение строк до конца тектса
Теперь переходя в командный режим и в консоли мы видим :'<,'>

Опеределение диапазона строк с помощью шаблонов
Пример :/<html>/,/<\/html>/p -- такой же сиетаксис как и у {start},{end} -- где вместо start и end -- напсаны начальные символы строк от которой до которой мы проводим поиск

Изменение с помощью стещения /<html>/+1,/<\/html>/-1p -- те следующая строка после найденной, и предывдующая перед полмдедней найденной.
В общем случае смещение выглядит так: :{address}+n
Ещё один пример :.,.+3p -- от текущей плюс 3 следующие
Символ   	Адрес
1		первая строка
$ 		последняя строка
0 		нулевая строка
. 		текущая строка
'm		переход к месту метки m
'<		начало визуального выделения 
'>		конец
% 		весь файл

:copy(co) :t -- используются для копирования 
пример :2t. скопировать 2ую строку и вставить после текущих
:move(m) -- для перемещения указанного фрагмента
@: -- для повторения последней команды

Применение команд командного режима к диапазону строк
A; -- ставим в конце одной из строк
jVG -- выделение всех строк которые ниже
:{address}normal -- применение последней команды ко всем указанным строкам, экваивалентно . в командном режиме 
По стандарту normal используется для выполения . , но можно явно указать какие команды будут использоваться вот общий синтаксис команды :{address}normal команда из командного режима
!прижде чем выполнять указанную команды vim переместит курсор в начало строки
:%normal i// вставить комментарии в начале каждого файла
:@ -- для повтора последенй команды, а @@ для повторения команды :@
tab -- используется для автодополнения команды
cntl-d -- позваоляет посмотреть параметры программы
Вставка текущего слова в командную строку:


